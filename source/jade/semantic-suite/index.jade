extends ../base

append styles
  link(rel="stylesheet", href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/7.3/styles/zenburn.min.css")

block content
  article
    header
      hgroup
        h1.ui.header Semantic Suite
        h2.ui.header Alpha
      p This will be a semantic style testing suite for JavaScript and then eventually other languages.

    a(href="https://github.com/johngeorgewright/Semantic-Suite")
      img(style="position: absolute; top: 0; right: 0; border: 0;", src="//s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png", alt="Fork me on GitHub")

    h2 Why make yet another testing suite?
    p Good point... why bother. There are some great testing suites out there already and there might not be much difference. The only difference I'm putting forward is less code and a more readable interface.
    p Let's take the old "calculator" example. (I'll first write these examples in CoffeeScript as it's makes Semantic Suite look even better).

    .ui.two.column.grid
      .column
        :markdown
          Here's the example using the Jasmine testing suite:

          ```coffeescript
          describe "Calculator", ->

            calculator = null

            beforeEach ->
              calculator = new Calculator()

            describe ".add()", ->

              beforeEach ->
                calculator.left = 50
                calculator.right = 70
                calculator.add()

              it "will sum the 2 numbers", ->
                expect(calculator.total).toBe 120 
          ```

      .column
        :markdown
          Here's the same example using Semantic Suite.

          ```coffeescript
          "Calculator".features ->
            "Adding".scenario ->
              Given 'calculator', -> new Calculator()
              When -> calculator().left = 50
              And  -> calculator().right = 70
              And  -> calculator().add()
              Then -> expect(calculator().total).to.be 120
          ```

    p If you've used any testing suite with "Gherkin" syntax, or used something like "RSpec" you may notice some influence.
    p Here's the same example written in plain JavaScript. It's not quite as nice, but it still seems pretty readable:

    .ui.two.column.grid
      .column
        :markdown
          Jasmine:

          ```javascript
          describe("Calculator", function () {
            var calculator = null;

            beforeEach(function () {
              calculator = new Calculator();
            });

            describe(".add()", function () {

              beforeEach(function () {
                calculator.left = 50;
                calculator.right = 70;
                calculator.add();
              });

              it("will sum the 2 numbers", function () {
                expect(calculator.total).toBe(120);
              });

            });
          });
          ```
      .column
        :markdown
          Semantic Suite:

          ```javascript
          "Calculator".features(function(){
            Scenario(function(){
              Given("calculator", function(){ return new Calculator(); });
              When(function(){ calculator().left = 50; });
              And(function(){ calculator().right = 70; });
              And(function(){ calculator().add(); });
              Then(function(){ expect(calculator().total).to.be(120); });
            });
          });
          ```

    h2 Installation
    ol
      li Install Node.js
      li
        code sudo npm i -g semantic-suite

    h2 Using
    code sems my-test-file.coffee

